<h1>Custom Build Creating</h1><% @title_text = 'Custom Build'%>
<style type="text/css">
  form#custom-build-form ul {
    list-style: none;
    padding-left: 0pt;
    margin-left: 20pt;
  }
  form#custom-build-form ul li {
    margin-left: 0pt;
    display: block;
    height: 20pt;
  }
  form#custom-build-form ul li.goods label {
    color: #A53A3A;
  }

  form#custom-build-form ul li input {
    cursor: pointer;
    color: green;
    vertical-align: middle;
    margin-right: 10pt;
    width: 20px;
    height: 20px;
  }

  form#custom-build-form label {
    display: inline;
    cursor: pointer;
  }

  form#custom-build-form div#calc {
    height: 330px;
    width: 20pt;
    background: #CFCEBD;
    position: relative;
    float: right;
    margin-right: 20pt;
  }

  form#custom-build-form div#calc div#bar {
    background: #8A7;
    position: absolute;
    width: 100%;
    bottom: 0px;
  }

  form#custom-build-form div#calc div#num {
    margin-left: -40pt;
    margin-top: -0.5em;
    position: absolute;
    color: #DE4200;
  }
</style>
<p>
  You are free to create your own built of RightJS which fits your needs the best.
</p>
<p>
  To create the builds we use the <a href="http://github.com/MadRabbit/frontcompiler" target="_blank">Front Compiler</a>,
  the most effective javascript compressing library written in Ruby.
</p>

<h2>Custom Builder</h2>
<form action="<%= custom_builds_path %>" id="custom-build-form" method="post">
  <p>
    <ul>
      <%= [
        ['cookie',   'Cookies support'],
        ['form',     'Form Additional Features'],
        ['xhr',      'Ajax Features'],
        ['fx',       'Basic Visual Effects'],
        ['olds',     'Old Browsers Support'],
        
        # RightJS Goods modules
        ['json',     'JSON support',                  true],
        ['events',   'Advanced DOM-Events handling',  true],
        ['effects',  'Additional Visual Effects',     true],
        ['behavior', 'Behaviors Module',              true],
        ['dnd',      "Drag'n'Drop Module",            true],
        ['rails',    'Ruby And Rails Support Module', true],
        
        ['compress', 'Compress Source Code'],
        ['build',    'Create Self-Build Script']
      ].collect do |options|
        content_tag :li,
            check_box_tag("options[#{options.first}]", 1, !options[2] && options[0] != 'olds') +
            label_tag("options_#{options.first}", options[1]),
          :class => options[2] ? :goods : nil
          
      end.join("\n")
      %>
    </ul>
    
  </p>
  
  <p class="buttons">
    <input type="submit" value="Create" />
    <input type="reset"  value="Reset" id="form-reset" />
  </p>
</form>

<div style="font-size: 80%">
<p style="margin-top: 30pt">
  The brown options are modules out of the <%= link_to 'RightJS Goods', goods_path %> project.
</p>

<h2>The Self-Building Feature</h2>
<p>
  The self-building feature creates a self-building javascript code
  that reconstructs itself on the browser side. It gives additionally about 25-30%
  of compression, but in exchange it takes about 5-100 ms on reconstruction (depends on a browser).
  <br/><br/>
  In most of the cases of real live applications it is practically invisible for the
  user, but if you are creating an extremely light-weight application and care about the
  user experience you might consider to switch the feature off.
</p>
</div>

<script type="text/javascript">
// <!--

// some nice looking calculator method

var build_sizes = <%= @build_sizes.to_json %>;
var build_keys  = <%= (RIGHTJS_BUILD_OPTIONS.collect{|o| o.gsub(/^no\-/, '')} + ['build', 'compress']).to_json %>;
var max_size    = Math.max.apply(null, Object.values(build_sizes));
var min_size    = Math.min.apply(null, Object.values(build_sizes));

var build_form  = $('custom-build-form');

var calc     = $E('div', {id: 'calc'});
var calc_bar = $E('div', {id: 'bar'}).insertTo(calc);
var calc_num = $E('div', {id: 'num'}).insertTo(calc_bar);

build_form.insert(calc, 'top');

var CalcFx = new Class(Fx.Morph, {
  prepare: function(start_size, end_size) {
    this.startSize = start_size;
    this.endSize   = end_size;
    
    this.element.highlight('brown', '#8A7', {queue: false});
    
    this.$super({height: (calc.sizes().y * (end_size / max_size)) + 'px'});
  },
  
  render: function(delta) {
    var size = this.startSize + (this.endSize - this.startSize) * delta;
    size = ((size/100).round()/10).toString();
    if (!size.includes('.')) size += ".0";
    calc_num.update(size + 'k');
    
    this.$super(delta);
  }
});

var prev_size = 0;
var update_calc = function() {
  var options = build_keys.map(function(key) {
    return $("options_"+key).checked ? 1 : 0;
  }).join('');
  var new_size = build_sizes[options];
  if (new_size) {
    new CalcFx(calc_bar).start(prev_size, new_size);
    prev_size = new_size;
  }
};

build_form.inputs().each(function(input) {
  if (input.type == 'checkbox') {
    input.on('click', update_calc);
  }
});
$('form-reset').on('click', function() { update_calc.delay(50); });

document.onReady(update_calc);

// -->
</script>