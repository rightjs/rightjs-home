<h1>Ajax Handling</h1><% @title_text = "Tutorials: Ajax Handling" %>

<p>
  As any modern JavaScript frameworks RightJS comes with cross browser Ajax
  functionality.
</p>
<p>
  Generally there is just one simple class called {Xhr} that responsible for
  almost all the ajax functionality.
</p>
<p>
  Some simple examples might look the following way
</p>
<code>
new Xhr('/some/url').send();
new Xhr('/some/url').send('param=value');
new Xhr('/some/url', {onFinish: function() {..}}).send();
</code>

<%= chapter "Options List", :options %>
<p>
  {Xhr} supports options with the following keys
</p>
<table>
  <tr><th>Key</th>          <th>Default</th><th>Description</th></tr>
  <tr><td>method</td>       <td>‘post’</td> <td>request method</td></tr>
  <tr><td>encoding</td>     <td>‘utf-8’</td><td>encoding</td></tr>
  <tr><td>async</td>        <td>true</td>   <td>asynchronous request</td></tr>
  <tr><td>evalScripts</td>  <td>false</td>  <td>extract/eval javascripts from the response</td></tr>
  <tr><td>evalResponse</td> <td>false</td>  <td>eval response as a javascript code</td></tr>
  <tr><td>evalJSON</td>     <td>true</td>   <td>eval json responses automatically</td></tr>
  <tr><td>urlEncoded</td>   <td>true</td>   <td>urlencode the parameters</td></tr>
  <tr><td>spinner</td>      <td>null</td>   <td>spinner element or element id</td></tr>
  <tr><td>params</td>       <td>null</td>   <td>default parameters</td></tr>
</table>

<p>
  You can send any of the options in a hash as the second argument of the 
  {Xhr} constructor, or you can set them up globally for all the {Xhr}
  requests by changing the {Xhr.Options} variable. When you do so all the
  following {Xhr} requests will take the new options.
</p>
<code>
Xhr.Options.spinner = 'global-spinner-id';
Xhr.Options.params  = 'my=params&global=options';
</code>


<%= chapter "Events List", :events %>
<p>
  {Xhr} class provides the standard {Observer} functionality and supports the
  following events.
  
  <ul>
    <li>create</li>
    <li>request</li>
    <li>complete</li>
    <li>success</li>
    <li>cancel</li>
  </ul>
  
  You can send your callbacks along with the constructor options or handle by
  {Observer} methods in the standard way.
</p>
<code>
new Xhr('/some/url', {onFinish: function() {...}}).send();
new Xhr('/some/url').on('finish', function() {...}).send();
new Xhr('/some/url').onFinish(function() {...}).send();

var xhr = new Xhr('/some/url');
xhr.onComplete(some_function);
xhr.stopObserving(some_function);
</code>
<p>
  Surely you can add your own events if you need so
</p>
<code>
var xhr = new Xhr('/some/url');

xhr.on('my-event', function() {...});
xhr.checkMyEvent = function() {
  if (this.something) {
    this.fire('my-event');
  }
};

xhr.onComplete('checkMyEvent');
</code>
<p>
  <b style="color: grey">NOTE:</b> all the callbacks will be called in the
  context of the request and receive two arguments, current request instance
  and the original XMLHttpRequest object.
</p>


<%= chapter "Spinners Handling", :spinners %>
<p>
  {Xhr} class in RightJS has a built-in support of spinners handling. You
  don't need to attach event listeners to show and hide them. You just specify
  reference to your spinner and {Xhr} will do it for you automatically.
</p>
<p>
  You can specify a global spinner for all the {Xhr} requests or set custom
  spinners per request.
</p>
<code>
Xhr.Options.spinner = $('spinner');
Xhr.Options.spinner = 'global-spinner-id';

// or per request
new Xhr('/some/url', {spinner: 'custom-spinner'}).send();
</code>
<p>
  <b style="color: grey">NOTE:</b> if you did specify both global and local
  spinners, both of them will be shown.
</p>

<%= chapter "Parameters Handling", :parameters %>
<p>
  There are three levels of parameters you can specify to be sent with any
  request. Global, per instance and per send.
</p>
<p>
  Global parameters might be set at the {Xhr.Options} object and will be sent
  with every request. Instance level parameters might be specified with the
  constructor options and will be sent every time you send the request. And
  eventually you can specify some additional options with the {Xhr#send}
  method.
</p>
<p>
  If you specify the options on several levels, they will be merged with the
  'last win' strategy.
</p>
<code>
Xhr.Options.params = 'my_cite_key=123234';

var xhr = new Xhr('/some/url', {params: 'request=params'});

xhr.send('some_more=params&send=options');
</code>
<p>
  Parameters might be url-encoded strings or hashes. Hashes will be converted
  into strings and url-encoded if necessary.
</p>
<code>
new Xhr('/some.url').send('some=params&more=options');

// or like this
new Xhr('/some.url').send({some: 'params', more: 'options'});
</code>
<p>
  Additionally, you can send a form element instance to the {Xhr#send} method,
  {Xhr} will automatically grab the form data, convert it into parameters, and
  send.
</p>
<code>
new Xhr('/some/url').send($('my-form'));
</code>


<%= chapter "JSON Responses", :json %>
<p>
  By default {Xhr} if received a response with the json content-type,
  will try to evaluate the response and assign the json object to the
  <tt>responseJSON</tt> attribute of the request.
</p>
<code>
new Xhr('/some.json', {
  onSuccess: function() {
    var json = this.responseJSON;
  }
}).send();
</code>
<p>
  You can switch the feature off by setting the <tt>evalJSON</tt> option to
  <tt>false</tt>
</p>


<%= chapter "Shortcuts and DOM support", :shortcuts %>
<p>
  There are view shortcuts and additional methods that will make your live
  easier when you implement an ajax application.
</p>
<p>
  To shortify {Xhr} instancing you can use the {Xhr.load} method that will
  create an {Xhr} instance and send the request.
</p>
<code>
Xhr.load('/some/url', {
  method: 'get',
  onSuccess: function(request) {
    // do something about it
  }
});
</code>
<p>
  With the {Xhr#update} method you can update elements content with the
  requests response
</p>
<code>
new Xhr('/some/url').update('element');
</code>
<p>
  You can initiate the xhr-request directly from the element instance by
  calling the {Element#load} method. This will initiate applicable xhr
  request and update the element content when the request is complete
</p>
<code>
$('element').load('/some/url');

$('element').load('/some/url', {method: 'get'});
</code>
<p>
  End eventually you can submit your forms via ajax requests directly from the
  forms by calling the {Form#send} method. It will read the form
  <tt>action</tt> and <tt>method</tt> attributes, initiate a suitable xhr
  request, serialize the form data and send the request.
</p>
<code>
$('my-form').send();
$('my-form').send({
  spinner: 'form-spinner',
  onSuccess: function() {
    $('notices').update(this.responseText);
  }
});
</code>
<p>
  <b style="color: grey">NOTE:</b> This feature supports files uploading too.
  If your form has the <tt>enctype</tt> attribute equals to
  <tt>multipart/form-data</tt>, then the form will be sent via virtual ajax
  request through some hidden iframe.
</p>
<p>
  The interface although stay the same and everything will get
  happened automatically.
</p>