<h1>DOM Event Extensions Tutorial</h1><% @title_text = "Tutorials: DOM Event Extensions" %>

<p>
  RightJS has its own way to provide you an ability to work with dom-events in a cross-browsing way. And the idea is simple.
</p>
<p>
  Instead of building some mediator interface, RightJS does not invent the wheel and simply fixes the nonstandard version
  of dom-events, namely, the Internet Explorer version.
</p>
<p>
  RightJS just adds the following W3C standard attributes, in case of work with IE browsers:
  <ul>
    <li><tt>which</tt> - which mouse button was pressed (1,2,3)</li>
    <li><tt>target</tt> - target element reference</li>
    <li><tt>relatedElement</tt> - the related element for the over and out mouse events</li>
    <li><tt>pageX</tt>, <tt>pageY</tt> - the cursor position relative to the document</li>
  </ul>
</p>
<p>
  The reason is simple. This way there will absolutely no overhead, for the browsers that following the standards, 
  and then, you won't need to learn a thing. Just relax, imagine you have your lovely FF, WebKit or Opera and do
  what you was going to do. RightJS will take care of things.
</p>

<h2>Additional DOM-Event Methods</h2>
<p>
  Additionally, RightJS has well... additional dom-event methods. They all are pretty much standard, and 
  you need to remember just two of them: {Event#stop} and {Event#position}.
</p>
<p>
  The first one as you might imagine stops the event from further bubbling and propagation
</p>
<code>
$('unclickable-element').onClick(function(e) {
  e.stop();
});
</code>

<p>
  And the second one returns the current absolute position of the cursor
</p>
<code>
$('some-element').onClick(function(e) {
  $('context-menu').moveTo(e.position()).show();
});
</code>

<p>
  Those additional methods are defined on the <tt>Event</tt> prototype level and won't cause any
  overhead on any modern browsers.
</p>

<h2>Manual Events Extending</h2>
<p>
  In case you are creating some patch for the old IE browsers (6 and 7 versions) and for some reasons
  used the <tt>attachEvent</tt> method you still can extend the incoming events by calling the {Event.ext}
  method like that:
</p>
<code>
$('some-element').attachEvent('onclick', function(event) {
  Event.ext(event);
});
</code>

