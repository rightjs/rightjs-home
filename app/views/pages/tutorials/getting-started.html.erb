<h1>Getting Started</h1><% @title_text = "Tutorials: Getting Started" %>
<p>
  This article is meant to give you a basic overview for the most common features and use cases of RightJS.
</p>
<%= anchors_index %>


<%= chapter "Installation", :installation %>
<p>
  The only tricky part of RightJS installation is that it comes in two files. One of them is the actual
  core and the other one contains old-browsers support code. But don't worry, for the installation process
  it doesn't change anything. Just <%= link_to "download", "/download" %> the files, drop them both next
  to each other where you want them and then include the <u>core</u> file in the usual way.
</p>
<code>
<script src="/javascript/right.js"></script>
</code>
<p>
  Don't worry about the second file. RightJS will automatically hook it up when needed.
</p>


<%= chapter "DOM Navigation", :navigation %>
<p>
  RightJS mostly inherits the dom-navigation principles from the Prototype and Mootools frameworks.
  That means you have two top level functions <tt>$(id)</tt> and <tt>$$(css_rule)</tt>.
</p>
<code>
$('element-id');     // -> Element

$$('div > div.boo'); // -> Array
</code>
<p>
  Then, every {Element} instance has a number of methods to navigate through its neighborhood, like
  <tt>select</tt>, <tt>subNodes</tt>, <tt>siblings</tt>, etc. Each of them can be used as is
  or can receive a string css-rule that will filter the result.
</p>
<code>
element.select('div.boo span.foo'); // all levels descendants

element.parent();        // the first parent
element.parent('div');   // the first DIV parent
</code>
<p>
  RigthJS supports all the standard CSS3 selectors on all browsers. <%= link_to "Read more", tutorial_path('dom-navigation-and-manipulations') %>
</p>


<%= chapter "Working With Collections", :collections %>
<p>
  To keep it simple RightJS doesn't have any specific interfaces to process dom-elements collections,
  instead of that it offers something nicer and more generic. You can process {Array}s by specifying 
  property/method name and optional attributes just like that.
</p>
<code>
var ids = $$('div').map('id');
var classes = $$('div').map('className').map('split', /\s+/).flatten();

$$('input').each('disable');
$$('input').filter('disabled');

$$('div').each('update', 'with the text');
$$('div').each('addClass', 'marked');
$$('div').each('onClick', 'addClass', 'marked');
</code>
<p>
  Read <%= link_to "this article", tutorial_path('call-by-name') %> for more information about the feature.
</p>


<%= chapter "Events handling", :events %>
<p>
  Events handling in RightJS is kind of a mix of Prototype and jQuery ideas. There is a basic method
  called <tt>on</tt>, which can take various sort of arguments and a list of shortcuts for all the
  standard dom-events
</p>
<code>
element.on('click', function() {});
element.on({click: function(){}, mouseover: function() {} });
element.on('click', [func1, func2, func3, func4]);

// standard event shortcuts
element.onClick(function() {});
element.onMouseover(function() {});

// it also supports the by-name event handlers
element.onClick('addClass', 'marked');
element.onClick('morph', {background: 'green'});
</code>
<p>
  See the <%= link_to 'dom-event basics', tutorial_path('dom-events-basics') %> and
  <%= link_to 'dom-event extensions', tutorial_path('dom-event-extensions') %> for more information
</p>


<%= chapter "Visual Effects", :fx %>
<p>
  By default RightJS comes with an extensive visual effects engine that allows you to smoothly morph
  any dom-element to any style, plus there are a number of standard effects like <tt>highlight</tt>,
  <tt>fade</tt>, <tt>slide</tt>, <tt>scroll</tt>.
</p>
<p>
  You can do both, use them in an OOP way like Scriptaculous, or use dom-level methods like jQuery.
</p>
<code>
new Fx.Morph('element').start({background: 'green'});

$('element').morph({background: 'green', fontSize: '20px'});

$('element').fade().slide().highlight();
</code>
<p>
  You can see the visual effects demo <a href="/fx-demo">over here</a>, and read more about them
  in <%= link_to "this article", tutorial_path('visual-effects') %>
</p>

<%= chapter "AJAX Operations", :ajax %>
<p>
  There is the main interface for ajax operations called {Xhr} (after XmlHTTPRequest). You can use
  it as a class like in Prototype, or you can use it in a procedural way like in jQuery.
</p>
<code>
new Xhr('/url').send();
new Xhr('/url', {method: 'get'}).update('element');

Xhr.load('/url');
$('element').load('/url', {method: 'get'});
</code>
<p>
  Hey, we have a backed in spinners handling in there!
</p>
<code>
Xhr.load('/url', {spinner: 'spinner'});
</code>
<p>
  And we can send forms via ajax just like that (including forms with files to upload)
</p>
<code>
$('my-form').send({onFinish: callback});

// or like that
$('my-form').remotize();
$('my-form').submit();
</code>
<p>
  Read more about that in <%= link_to 'this article', tutorial_path('ajax-handling') %>
  and in the API documentation for {Xhr}
</p>


<%= chapter "Cookies Handling", :cookies %>
<p>
  By default RightJS has a simple interface to help you work with the cookies. It automatically
  escapes/unescapes the values, sets expiration dates and makes other helpful things.
  And if you hook up the <a href="/goods/json">JSON</a> module it will transparently save
  and retrieve any JSON exportable values like arrays, objects, booleans, etc.
</p>
<code>
Cookie.set('key', 'value');
Cookie.get('key');
Cookie.remove('key');
</code>
<p>
  Read the api documentation for {Cookie} for more details
</p>

<%= chapter "Object Oriented Programming", :oop %>
<p>
  RightJS is an object oriented framework and it provides extensive abilities for OOP approach.
  In a basic case it looks like Prototype classes.
</p>
<code>
var MyClass = new Class({
  initialize: function() {
    // constructor
  },

  method1: function() {},
  method2: function() {}
});
</code>
<p>
  But classes in RightJS also support inheritance and Ruby-style modules sharing. Read
  <%= link_to "this article", tutorial_path('object-oriented-programming') %> for more
  information on this topic.
</p>