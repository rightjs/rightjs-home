<h1>Right Sortable</h1> <% @title_text = "UI: Sortable" %>
<p>
  Right Sortable is the sortable lists feature for RightJS
</p>
<p>
  Get the latest version right here
  <ul>
    <li><a href="/builds/ui/right-sortable.js"     target="_blank">right-sortable.js</a> - fully compressed build</li>
    <li><a href="/builds/ui/right-sortable-min.js" target="_blank">right-sortable-min.js</a> - minified version</li>
    <li><a href="/builds/ui/right-sortable-src.js" target="_blank">right-sortable-src.js</a> - uncompressed source code with comments</li>
  </ul>
  NOTE: This module requires the <%= link_to 'drag-n-drop', goods_path('drag-n-drop')%> library
</p>

<h2>What's Up?</h2>
<p>
  Right Sortable has the following features:
  <ul>
    <li>RESTful design friendly urls processing</li>
    <li>Automatic vertical/horizontal direction recognition</li>
    <li>Auto-Discovery feature support</li>
    <li>Tiny size of less than 2k</li>
  </ul>
</p>
<p>
  See the <%= link_to 'live demo', '/ui/sortable/demo' %> page for examples.
</p>

<h2>Usage</h2>
<p>
  There are several ways to initialize sortable lists. First of all using the <tt>Sortable</tt>
  class directly inside your JavaScript code
</p>
<code>
new Sortable('todos', { url: '/todos' });
</code>
<p>
  Secondly you might use the {Element} level shortcut called <tt>'makeSortable'</tt>
</p>
<code>
$('todos').makeSortable({ url: '/todos' });
</code>
<p>
  You also can destroy the sortable functionality by calling the <tt>'undoSortable()'</tt> method on
  your element, or by calling the <tt>'destroy'</tt> method on a sortable instance.
</p>
<code>
new Sortable('todos', { url: '/todos' }).destroy();

$('todos').makeSortable({ url: '/todos' }).undoSortable();
</code>

<h2>Auto-Discoverable Sortables</h2>
<p>
  As all the other widgets in the RightJS UI library sortables can be defined using the <tt>rel</tt>
  attribute and HTML5 style option attributes like that
</p>
<code>
// simple sortable
<ul rel="sortable">
  <li>Item 1</li>
  <li>Item 2</li>
</ul>


// remote sortable
<ul rel="sortable" data-sortable-options="{url: '/todos'}">
  <li id="item_1">Feed the fish</li>
  <li id="item_2">Call mommy</li>
</ul>
</code>

<h2>Options</h2>
<p>
  You might use the following options to customize your sortables
  
  <table>
    <tr><th>Name</th>      <th>Default</th>    <th>Description</th></tr>
    <tr><td>direction</td> <td>'auto'</td>     <td>'auto', 'vertical', 'horizontal', 'x', 'y'</td></tr>
    <tr><td>tags</td>      <td>'li'</td>       <td>the list items tag name</td></tr>
    <tr><td>url</td>       <td>null</td>       <td>the Xhr requests url address, might contain the '%{id}' placeholder</td></tr>
    <tr><td>method</td>    <td>'put'</td>      <td>the Xhr requests method</td></tr>
    <tr><td>Xhr</td>       <td>{}</td>         <td>additional Xhr options</td></tr>
    <tr><td>idParam</td>   <td>'id'</td>       <td>the url id value name</td></tr>
    <tr><td>posParam</td>  <td>'position'</td> <td>the url position value name</td></tr>
    <tr><td>parseId</td>   <td>true</td>       <td>if the id attribute should be converted into an integer before sending</td></tr>
    <tr><td>relName</td>   <td>'sortable'</td> <td>the auto-discovery feature key</td></tr>
  </table>
</p>

<h2>Events</h2>
<p>
  There is just one event name for this unit <tt>'update'</tt>. Callbacks for this event will receive the moved list item element
  and its new position index in the list.
</p>
<code>
new Sortable('todos', {
  onUpdate: function(element, position) {
    // ....
  }
});
</code>

<h2>Urls And Remote Calls Processing</h2>
<p>
  In this area everything is pretty much straight forward, you can define the <tt>url</tt> and <tt>method</tt> with the options,
  plus you can specify some additional Xhr params, like spinners, callbacks, etc. at the <tt>'Xhr'</tt> option.
</p>
<p>
  Additionally, our sortables support the '%{id}' placeholder in the urls so you can define RESTful
  friendly url addresses like that
</p>
<code>
new Sortable('boo', {
  url: 'todos/%{id}.js'
});
</code>
<p>
  After that the sortable will try to get an ID out of a moved element, optionally parse an integer
  number out of it and replace the place holder with the ID, so it will hit addresses like that
</p>
<code>
/todos/1.js
/todos/2.js
.....
</code>