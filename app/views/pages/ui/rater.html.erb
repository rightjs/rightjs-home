<h1>RightJS UI: Rater</h1><% @title_text = 'UI: Rater' %>
<p>
  Rater is a standard rating widget for RightJS. It can work as a standalone widget,
  can automatically send user rates via {Xhr} requests, or it can work in pair with
  an input element as a part of a form.
</p>
<p>
  Visit the <%= link_to 'demo page', '/ui/rater/demo' %> for some basic use cases.
</p>

<%= anchors_index %>


<%= chapter "Features List", :features %>
<p>
  <ul>
    <li>Can work as a standalone widget</li>
    <li>Can work as a part of a form</li>
    <li>Can automatically send ratings via {Xhr} requests</li>
    <li>Super easy usage</li>
    <li>Comes in a tiny single file (2.3k)</li>
  </ul>
</p>


<%= chapter "Usage Basics", :usage %>
<p>
  The usage is super easy. Just include one of the following files to your page.
  <ul>
    <li><a href="/builds/ui/right-rater.js"     target="_blank">right-rater.js</a> - fully compressed build</li>
    <li><a href="/builds/ui/right-rater-min.js" target="_blank">right-rater-min.js</a> - minified version</li>
    <li><a href="/builds/ui/right-rater-src.js" target="_blank">right-rater-src.js</a> - uncompressed source code with comments</li>
  </ul>
</p>
<p>
  After that you will have a choice, create your rater in script like this
</p>
<code>
new Rater({url: '/boo'}).insertTo('my-conatiner');
</code>
<p>
  Or you can define your rater element directly inside your page and our script will
  find it by the <tt>right-rater</tt> class name and then automatically initialize it.
</p>
<code>
<div class="right-rater" data-rater-options="{url:'/boo'}">
  <div>★</div>
  <div>★</div>
  <div>★</div>
  <div>★</div>
  <div>★</div>
</div>
</code>
<p>
  This also will let you put whatever you want instead of the textual stars.
</p>


<%= chapter "Assigned Raters", :assigned %>
<p>
  You also can assign any rater to work with any, say hidden, input elements so it was working as a part of a form.
  You can do that with the <tt>update</tt> option or by the <tt>assignTo()</tt> method
</p>
<code>
<form ...>
  <input type="hidden" id="the-rating" name="rating" />
  
  // with auto-discovery feature
  <div class="right-rater"
    data-rater-options="{update:'the-rating}">
    ...
  </div>
  
  // or in script with options
  new Rater({update: 'the-rating'})
    .insertTo('the-rating', 'after');
  
  // or like that
  new Rater().insertTo('the-rating', 'after')
    .assignTo('the-rating');
</form>
</code>
<p>
  NOTE: the assignment works in both ways, when yo change the rater it will change the input element,
  and when you change the input element it will change the rater status.
</p>


<%= chapter "Remote Raters", :remote %>
<p>
  Our raters can automatically send {Xhr} requests when the user clicks any rating on the widget.
  For this purpose there are three options.
  <ul>
    <li><tt>url</tt> - the url address where to send the requests</li>
    <li><tt>param</tt> - the param name for the rating, <tt>'rate'</tt> by default</li>
    <li><tt>Xhr</tt> - additional {Xhr} request options if you need</li>
  </ul>
</p>
<p>
  So your average remote rater might look like that
</p>
<code>
new Rater({
  url: '/some/stuff/rating',
  param: 'value',
  Xhr: {
    method: 'put',
    spinner: 'spinner'
  }
});
</code>


<%= chapter "Options List", :options %>
<p>
  There is a simple list of options you can use with the raters. You can pass them as a hash with
  the constructor, or set as a JSON hash inside of the <tt>data-rater-options</tt> attribute
  <table>
    <tr><th>Name</th>          <th>Default</th><th>Description</th></tr>
    <tr><td>size</td>          <td>5</td>      <td>number of stars in the line</td></tr>
    <tr><td>value</td>         <td>null</td>   <td>default value</td></tr>
    <tr><td>update</td>        <td>null</td>   <td>an element to update</td></tr>
    <tr><td>disabled</td>      <td>false</td>  <td>if it should be instantly disabled</td></tr>
    <tr><td>disableOnVote</td> <td>false</td>  <td>if it should be disabled when the user clicks a value</td></tr>
    <tr><td>url</td>           <td>null</td>   <td>an url to send results with AJAX</td></tr>
    <tr><td>param</td>         <td>'rate'</td> <td>the value param name</td></tr>
    <tr><td>Xhr</td>           <td>null</td>   <td>additional Xhr options</td></tr>
  </table>
</p>


<%= chapter "Events List", :events %>
<p>
  Our raters work with the following list of events. Every listener will receive two arguments,
  the current value and a reference to the rater object.
  <table>
    <tr><th>Name</th>   <th>Description</th></tr>
    <tr><td>hover</td>  <td>when a user hovers some star with a mouse</td></tr>
    <tr><td>change</td> <td>when a user changes the rater value</td></tr>
    <tr><td>send</td>   <td>when an xhr request with rating was sent</td></tr>
  </table>
</p>


<%= chapter "API Reference", :api %>
<p>
  All the <tt>Rater</tt> class instances have the following simple public API
  <table>
    <tr><th>Name</th>              <th>Description</th></tr>
    <tr><td>setValue(value)</td>   <td>sets the value</td></tr>
    <tr><td>getValue()</td>        <td>returns the value</td></tr>
    <tr><td>insertTo(element, position)</td><td>inserts the widget inside the element</td></tr>
    <tr><td>assignTo(element)</td> <td>assigns the rater to the element</td></tr>
    <tr><td>send()</td>            <td>sends the rating via {Xhr}</td></tr>
    <tr><td>disable()</td>         <td>disables the rater</td></tr>
    <tr><td>enable()</td>          <td>enables the rater</td></tr>
    <tr><td>disabled()</td>        <td>checks if the rater is disabled</td></tr>
  </table>
</p>

<%= chapter "Style Alterations", :styles %>
<p>
  The widget structure is simple as that
</p>
<code>
<div class="right-rater" data-rater-options="{url:'/boo'}">
  <div class="right-rater-glow">★</div>
  <div class="right-rater-glow">★</div>
  <div>★</div>
  <div>★</div>
  <div>★</div>
</div>
</code>
<p>
  Disabled raters will be assigned with the <tt>right-rater-disabled</tt> class
</p>
<p>
  Then as you might noticed, to simplify the things we use utf-8 symbols for the stars, so
  here's a simple style snippet if you wan't to replace them with some images of yours
</p>
<code>
div.right-rater div {
  width: 10px;
  height: 10px;
  text-indent: -99em;
  background-image: url('/images/star-off.png');
  background-repeat: no-repeat;
  background-position: center center;
}
div.right-rater div.right-rater-glow {
  background-image: url('/images/star-on.png');
}
</code>
