<h1>RightJS UI: Slider</h1><% @title_text = 'UI: Slider' %>
<p>
  Slider is a simple standard slider widget. It can work as a standalone widget or be assigned
  to any element, which it will update.
</p>
<p>
  Visit the <%= link_to "demo page", "/ui/slider/demo" %> for some basic use-cases.
</p>

<%= anchors_index %>

<%= chapter "Features List", :features %>
<p>
  <ul>
    <li>Comes in a single tiny (3k) file</li>
    <li>Works as standalone widget or can be assigned to another element</li>
    <li>Can be generated or initialized on existing elements</li>
    <li>Pure CSS based design, comes with basic styles</li>
    <li>Supports both, vertical and horizontal sliders</li>
  </ul>
</p>

<%= chapter "Usage Basics", :usage %>
<p>
  This widget uses the <%= link_to "drag-n-drop", "/goods/drag-n-drop" %> module. Include it onto your page along
  with one of the following files
  <ul>
    <li><a href="/builds/ui/right-slider.js"     target="_blank">right-slider.js</a> - fully compressed build</li>
    <li><a href="/builds/ui/right-slider-min.js" target="_blank">right-slider-min.js</a> - minified version</li>
    <li><a href="/builds/ui/right-slider-src.js" target="_blank">right-slider-src.js</a> - uncompressed source code with comments</li>
  </ul>
</p>
<p>
  Then create your slider like that
</p>
<code>
new Slider({min: 0, max: 100, value: 20})
  .insertTo('my-element').assignTo('my-input');
</code>
<p>
  You can go even simpler just create a tags structure with your options like that
</p>
<code>
<div class="right-slider" data-slider-options="{min:0,max:100,update:'my-input'}">
  <div class="right-slider-handle"></div>
</div>
</code>
<p>
  When the page is loaded our script will automatically find and initialize your slider
</p>

<%= chapter "Vertical Sliders", :vertical %>
<p>
  For vertical sliders use the options <tt>direction</tt> or a css-class <tt>right-slider-vertical</tt>, this way
</p>
<code>
new Slider({direction:'y', ....})

// or as a html structure

<div class="right-slider right-slider-vertical" ...>
  <div class="right-slider-handle"></div>
</div>
</code>


<%= chapter "Options List", :options %>
<p>
  You can use the following list of options with the <tt>Slider</tt> constructor or the <tt>data-slider-options</tt> attribute
  <table>
    <tr><th>Name</th>      <th>Default</th> <th>Description</th></tr>
    <tr><td>min</td>       <td>0</td>       <td>the min value</td></tr>
    <tr><td>max</td>       <td>100</td>     <td>the max value</td></tr>
    <tr><td>snap</td>      <td>0</td>       <td>the values threshold</td></tr>
    <tr><td>value</td>     <td>null</td>    <td>start value, if null then the min value will be used</td></tr>
    <tr><td>direction</td> <td>'x'</td>     <td>slider direction 'x', 'y'</td></tr>
    <tr><td>update</td>    <td>null</td>    <td>reference to an element to update</td></tr>
    <tr><td>round</td>     <td>0</td>       <td>the number of symbols after the decimal pointer</td></tr>
  </table>
</p>


<%= chapter "Events List", :events %>
<p>
  There is just one event with this widget, the name is <tt>change</tt>.
</p>


<%= chapter "API Reference", :api %>
<p>
  All the <tt>Slider</tt> class instances have the following public methods
  <table>
    <tr><th>Name</th>              <th>Description</th></tr>
    <tr><td>setValue(value)</td>   <td>the value assignment method</td></tr>
    <tr><td>getValue()</td>        <td>current value getter</td></tr>
    <tr><td>reset()</td>           <td>resets the value to the defaults</td></tr>
    <tr><td>insertTo(element)</td> <td>inserts this slider into the element</td></tr>
    <tr><td>assignTo(element)</td> <td>assign this slider to update th element</td></tr>
  </table>
</p>


<%= chapter "Style Alterations", :styles %>
<p>
  The tags structure for this widget is as simple as it is.
</p>
<code>
// horizontal slider
<div class="right-slider">
  <div class="right-slider-handle"></div>
</div>

// vertical slider
<div class="right-slider right-slider-vertical">
  <div class="right-slider-handle"></div>
</div>
</code>