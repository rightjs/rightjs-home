<h1>Call By Name</h1><% @title_text = "Tutorials: Call By Name" %>

<p>
  Call By Name is one of the major features of RightJS and works in 
  many places in the framework.
</p>

<p>
  The idea is really simple. It brings the dynamic functions involvement 
  similar to the method <tt>invoke</tt> in some programming languages. 
</p>
<code>
['foo', 'boo', 'moo'].invoke('replace', 'oo', 'aa');

// -> ['faa', 'baa', 'maa']
</code>
<p>
  You just pass a method name and some optional arguments into the method of 
  collection and it will call for the method by name.
</p>
<p>
  But instead of creating such additional methods, RightJS extends the idea
  and generally lets you feed all the generic methods with method names.
</p>
<p>
  Say you could strip tags in each string in a list of strings like this
</p>
<code>
strings.each(function(string) {
  return string.stripTags();
});
</code>
<p>
  Or you could do just the same thing calling the method by name
</p>
<code>
strings.each('stripTags');
</code>
<p>
  RightJS works perfectly with both method or attribute names. There are some
  use cases.
</p>
<code>
// some strings processing example
var lowercased = strings.map('toLowerCase');
var uppercased = strings.map('toUpperCase');
var trimmed    = strings.map('trim');
var blanks     = strings.filter('blank');
var replaced   = strings.map('replace', 'some', 'another');

// collecting the element ids
var ids = elements.map('id');

// disabling all the elements
elements.each('disable');

// adding a class to every element
elements.each('addClass', 'marked');

// attaching event listener to every element in a list
elements.each('on', 'click', 'toggleClass', 'marked');

// or you could do the same with a single element
element.on('click', 'toggleClass', 'marked');
</code>

<%= chapter "Why Do That?", :why %>
<p>
  If you still didn't get it try to read the piece of code above. Just as a 
  plain English text. The feature is really natural. There are lots and lots
  of cases like this, when you just need to call a method or grab an attribute
  on a collection, or attach an object method to an event.
</p>
<p>
  Instead of writing dummy functions you just  feed the generic methods with a 
 name and RightJS do all the rest for you. As the result you write more
  compact and readable code. And more compact code means fewer misprints and 
  bugs.
</p>


<%= chapter "Is There A Performance Overhead?", :overhead %>
<p>
  Practically there is no difference between specifying a real function or a
  name. As the matter of fact it will work even faster than if you just create
  a dummy function, bind it to the object and call its method manually.
  Because you eliminate the dummy and bind functions, and specify your method
  by reference without actually initializing new function.
</p>
<p>
  As the result, in many cases of routine operations, it works faster. Take a
  look at the <a href="/benchmarks">Benchmarks Page</a> and you'll see.
</p>