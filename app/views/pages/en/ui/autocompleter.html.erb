<h1>Right Autocompleter</h1><% @title_text = "UI: Autocompleter" -%>

<p>
  Right Autocompleter is the native autocompletion feature for RightJS
</p>
<p>
  Get the latest version right here
  <ul>
    <li><a href="/builds/ui/right-autocompleter.js"     target="_blank">right-autocompleter.js</a> - fully compressed build</li>
    <li><a href="/builds/ui/right-autocompleter-min.js" target="_blank">right-autocompleter-min.js</a> - minified version</li>
    <li><a href="/builds/ui/right-autocompleter-src.js" target="_blank">right-autocompleter-src.js</a> - uncompressed source code with comments</li>
  </ul>
</p>

<p>
  All the source code of the project are available under terms of the MIT license
</p>
<p>
  <a href="http://github.com/rightjs/rightjs-ui" target="_blank">http://github.com/rightjs/rightjs-ui</a>
</p>

<%= anchors_index %>

<%= chapter "Features List", :features %>
<p>
  Right Autocompleter has the following features:
  <ul>
    <li>Works with ajax requests or a local options list</li>
    <li>RESTful design and server side caching friendly urls</li>
    <li>Responses caching feature</li>
    <li>Comes in a single tiny file (less than 4k)</li>
    <li>No css or image dependencies</li>
    <li>Has basic styles in the box</li>
    <li>Has a basic textual spinner by default</li>
    <li>The autocompletion fields auto-discovery feature</li>
  </ul>
</p>
<p>
  See the <%= link_to 'live demo', '/ui/autocompleter/demo' %> page for examples.
</p>

<%= chapter "Usage Basics", :usage %>
<p>
  Basically there's no pubic API, so you just feed the constructor with
  a reference to your input element and specify some options
</p>
<code>
// <input type="text" id="my-input" />

// a remote list calling
new Autocompleter('my-input', {
  url: '/my/things'
});

// a local options list
new Autocompleter('my-input', {
  local: $w('mommy daddy sonny doggy kitty')
});
</code>

<%= chapter "Auto-Discovery Feature", :discovery %>
<p>
  As all the other widgets out of the RightJS UI library the autocompleters
  have ability to be automatically discovered and initialized. For that 
  purpose you might use a <tt>'rel'</tt> attribute like this.
</p>
<code>
<input type="text" rel="autocompleter[/your/url/goes/here]" />
</code>
<p>
  You also might define a local options list like this
</p>
<code>
<input type="text" rel="autocompleter['mommy','daddy','sonny']"/>
</code>
<p>
  You also can use the HTML5 style attributes for options like this
</p>
<code>
<input type="text" rel="autocompleter[/url]"
  data-autocompleter-options="{spinner: 'spinner'}"/>
</code>
<p>
  Once the page is loaded the script will sniff through your page and initialize
  the inputs.
</p>


<%= chapter "Options List", :options %>
<p>
  There is a simple list of options for the autocompleters. You might specify any of them as
  the constructor options or alter the settings globally by changing the <tt>Autocompleter.Options</tt> object.
  
  <table>
    <tr><th>Name</th>       <th>Default</th>           <th>Description</th></tr>
    <tr><td>url</td>        <td>document.location</td> <td>the url, might have the %{search} placeholders</td></tr>
    <tr><td>param</td>      <td>'search'</td>          <td>the requests parameter name</td></tr>
    <tr><td>method</td>     <td>'get'</td>             <td>the requests method</td></tr>
    <tr><td>minLength</td>  <td>1</td>                 <td>the minimal length when it starts work</td></tr>
    <tr><td>threshold</td>  <td>200</td>               <td>the typing pause threshold</td></tr>
    <tr><td>cache</td>      <td>true</td>              <td>a flag if it should use the results caching</td></tr>
    <tr><td>local</td>      <td>null</td>              <td>an optional local search results list</td></tr>
    <tr><td>fxName</td>     <td>'slide'</td>           <td>visual effects name, use 'null' to disable fx</td></tr>
    <tr><td>fxDuration</td> <td>'short'</td>           <td>the visual effect duration</td></tr>
    <tr><td>spinner</td>    <td>'native'</td>          <td>spinner reference</td></tr>
    <tr><td>relName</td>    <td>'autocompleter'</td>   <td>the auto-discovery feature key</td></tr>
  </table>
</p>

<%= chapter "Events List", :events %>
<p>
  You can use the following event names to work with our autocompleters
  
  <table>
    <tr><th>Name</th>   <th>Description</th></tr>
    <tr><td>show</td>   <td>when the list of suggestions is shown</td></tr>
    <tr><td>hide</td>   <td>when the list of suggestions is hidden</td></tr>
    <tr><td>update</td> <td>when the list of suggestions was updated</td></tr>
    <tr><td>load</td>   <td>when the xhr request is loaded</td></tr>
    <tr><td>select</td> <td>when some option was selected</td></tr>
    <tr><td>done</td>   <td>when the option was copied to the input element</td></tr>
  </table>
</p>


<%= chapter "Url Specifying", :url %>
<p>
  Right autocompleter provides two options to work with the target urls, you might
  specify the <tt>'param'</tt> and <tt>'url'</tt> options as the default and usual approach.
</p>
<code>
new Autocompleter('my-input', {
  url: '/my/url',
  param: 'search'
});

/*
  In this case the autocompleter will hit urls like this.
 
  /my/url?param=a
  /my/url?param=as
  /my/url?param=asd
  /my/url?param=asdf
  
*/
</code>

<p>
  You also might want to have more caching friendly urls without the parameters
  in this case you might use the <tt>'%{search}'</tt> placeholder in your url. Like this
</p>
<code>
new Autocompleter('my-input', {
  url: '/my/url/%{search}aa.js'
});

/*
  In this case the autocompleter will hit urls like this
  
  /my/url/a.js
  /my/url/as.js
  /my/url/asd.js
  /my/url/asdf.js
  
*/
</code>
<p>
  This will let you to drop the search results in static files on the server side.
</p>

