<h1>The Project Philosophy</h1><% @title_text = 'Project Philosophy' %>

<p>
  "Right" means "do it right". And this defines the idea behind the framework.
</p>
<p>
  RightJS does not intend to provide a lot of new features. Although it has some new things
  here and there, the main idea of the framework is to collect already existing features in
  the JavaScript development field. Refine and systemize them, make them closer to standards
  and more comfortable to use. And as the result make the developer's live easier.
</p>

<h2>RightJS Is JavaScript</h2>
<p>
  RightJS does not try to make Java or Ruby or Python out of JavaScript. JavaScript is a pretty,
  dynamic language by itself; and RightJS gets back to the roots, by bringing organization
  and dynamic language clarity in the JavaScript development process.
</p>
<p>
  RightJS is designed for people who work with dynamic languages, but it also tries to close
  to the JavaScript origins and don't make it behave like something else.
</p>

<h2>Close To The Standards</h2>
<p>
  There are several official, semi-official and non-official standards in the naming principles and functionality
  behavior in the JavaScript development area. Following the "less surprise" principle, RightJS tries to pick the most
  common/standard names and behavior for its methods and functions.
</p>
<p>
  And it always keeps the original, pure JavaScript functionality intact.
</p>

<h2>It Does What It Says</h2>
<p>
  One of the most important goals of RightJS is to provide you an ability to write a compact and
  easy to understand applications code.
</p>
<p>
  In most of the cases you don't need to be an expert in RightJS to understand someone-else's work and ideas.
  When you see something like this:
</p>
<code>
$(element).update('with text').highlight();

$(element).onClick('addClass', 'clicked');

$$('li').each('onClick', 'toggleClass', 'marked');
</code>
<p>
  You can be sure, the code does exactly what it says.
</p>


<h2>Low Entry Level</h2>
<p>
  Because of its tendency to stick to the standards and provide simple interfaces, it is really easy to
  use RightJS.
</p>
<p>
  If you know JavaScript and have previous experience with any JavaScript framework, you practically don't need
  anything to start work with RightJS. And you need to learn just a few simple principles to start use it effectively.
</p>


<h2>Multiple Paradigms</h2>
<p>
  RightJS is mostly an object-oriented framework, and it is designed the way to make it most natural for the 
  non-javascript developers who work with dynamic languages like Ruby and Python.
</p>
<p>
  But despite of that, RightJS tries to not put any constraints on the way the developer does his work. If you
  are an OOP person, you will have all the advanced OOP features, classes, modules, etc. If you are more 
  like a functional programming type, you will have functions, carrying, bindings, etc.
</p>
<p>
  At any moment you are free to do your work the way you think it's right.
</p>


<h2>Tiny Size And Excellent Performance</h2>
<p>
  RightJS does two important things: tries to not overcomplicate the things and it reuses all the native
  functionality any browser can provide.
</p>
<p>
  As the result, despite the fact it has all the standard features, it has a really tiny size of just about 30k and
  it <a href="/benchmarks">beats up</a> all the modern frameworks in a speed test.
</p>
<p>
  And smaller faster framework will leave more space for the actual application features.
</p>

<h2>Complete Toolbox and Modularity</h2>
<p>
  The basic build of RightJS comes as a complete toolbox core. It has all the standard things like OOP support,
  CSS-selectors, native classes extensions, DOM-objects manipulation functionality, ajax tools, cookies support
  and some basic visual effects support. Everything you need in 99% of cases.
</p>
<p>
  But it designed the way it is easy to cut off some features and add new ones. You can create the custom builds
  <a href="/builds">over here</a> and switch off the things you don't need.
</p>

