<h1>Project Philosophy</h1><% @title_text = 'Project Philosophy' %>

<p>
  RightJS is a developers oriented framework.
</p>

<p>
  That might sound strange for a piece of software which normally used by developers, but this defines the priorities. And the priority for RightJS is the developer. His needs and comfort for everyday work.
</p>

<h2>Stick to Standards</h2>
<p>
  RightJS tries to provide as much standard API as possible. All the names and basic behaviors are pretty much standard and predictible. If you have experience with dynamic languages and other JavaScript frameworks, most of the things will be pretty much natural and in most cases you won't need to get to the documentation.
</p>

<p>
  RightJS tries to have as less local tricks and features as possible. All the features it provides work globally over the framework with the same conventions and principles, and all of them again stick to the standards.
</p>

<h2>Compact and Readable Applications Code</h2>
<p>
  RightJS designed the way that developers could write compact and readable applications code. It does not have long and complicated classes structures and names. All the framework classes organized in an elegant compact one-level collection, ready to use.
</p>

<p>
  All the methods and names was thought over dozen of times, they were made as short as possible but still looking standard.
</p>

<p>
  RightJS extends the native JavaScript classes, to provide you everyday work functionality, like work with strings, arrays, functions, classes, types checks, files upload, etc. Which lets you concentrate on your actual application logic, not on surviving in the tight JavaScript environment.
</p>

<h2>Multiple Paradigms</h2>
<p>
  RightJS tries to not put much constrains on the way the developer does his work. It provides excellent tools for object-oriented approach as much as for functional programming approach. At any time the developer is free to choose the most appropriate and effective way to make his work done.
</p>

<h2>Complete Toolbox and Modularity</h2>
<p>
  In the basic build RightJS provides all the basic functionality 99% of real world applications need. That includes all the native classes extensions, CSS selectors, DOM manipulations, ajax tools, cookies management and basic visual effects. Everything you need to make your application work.
</p>
<p>
  But RightJS is not a monolith build, it is a toolbox, you can throw, replace, upgrade any tools in it. And sure you can reuse its abstract units, in your applications right away.
</p>

<h2>Excellent Performance</h2>
<p>
  One of the main goals of RightJS is to make it work fast, real fast. It squeezes everything from the browser to the drop, reuses all the native functionality it provides.
</p>
<p>
  And faster tools lets the developer put more in his applications, make it richer and more interesting.
</p>

<h2>Beautiful Insides</h2>
<p>
  RightJS inside code is made the way it will be a pleasure for the community to work with it. No monkey-patching, no spaghetti code, no weird designs inside. Everything is thoughtfully organized, covered with the documentation and unit-tests.
</p>
